1. add below dependcy to gatewayserver
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-circuitbreaker-reactor-resilience4j</artifactId>
		</dependency>
2. add below properties in gatewayserver  application.yml

resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowSize: 10
      permittedNumberOfCallsInHalfOpenState: 2
      failureRateThreshold: 50
      waitDurationInOpenState: 10000
	  
	  
3. Add filter of circuitbreaker to request going to accounts ms
		return routeLocatorBuilder.routes()
						.route(p -> p
								.path("/eazybank/accounts/**")
								.filters( f -> f.rewritePath("/eazybank/accounts/(?<segment>.*)","/${segment}")
										.addResponseHeader("X-Response-Time", LocalDateTime.now().toString())
										.circuitBreaker(config -> config.setName("accountsCircuitBreaker")
								.uri("lb://ACCOUNTS"))
								

4. montior below endpoints of actuator for avaialble circuitbreaker and its status

http://localhost:8072/actuator/circuitbreakers     (show info about status of circuitbreaker)
gives below info
a.
///////////CLOSED
{
  "circuitBreakers": {
    "accountsCircuitBreaker": {
      "failureRate": "-1.0%",
      "slowCallRate": "-1.0%",
      "failureRateThreshold": "50.0%",
      "slowCallRateThreshold": "100.0%",
      "bufferedCalls": 4,
      "failedCalls": 1,
      "slowCalls": 0,
      "slowFailedCalls": 0,
      "notPermittedCalls": 0,
      "state": "CLOSED"
    }
  }
}


///////////OPEN
{
  "circuitBreakers": {
    "accountsCircuitBreaker": {
      "failureRate": "100.0%",
      "slowCallRate": "0.0%",
      "failureRateThreshold": "50.0%",
      "slowCallRateThreshold": "100.0%",
      "bufferedCalls": 2,
      "failedCalls": 2,
      "slowCalls": 0,
      "slowFailedCalls": 0,
      "notPermittedCalls": 0,
      "state": "OPEN"
    }
  }
}


///////////HALF_OPEN
{
  "circuitBreakers": {
    "accountsCircuitBreaker": {
      "failureRate": "-1.0%",
      "slowCallRate": "-1.0%",
      "failureRateThreshold": "50.0%",
      "slowCallRateThreshold": "100.0%",
      "bufferedCalls": 1,
      "failedCalls": 0,
      "slowCalls": 0,
      "slowFailedCalls": 0,
      "notPermittedCalls": 0,
      "state": "HALF_OPEN"
    }
  }
}



http://localhost:8072/actuator/circuitbreakerevents?name=accountsCircuitBreaker

{
  "circuitBreakerEvents": [
    {
      "circuitBreakerName": "accountsCircuitBreaker",
      "type": "ERROR",
      "creationTime": "2025-08-04T15:51:55.039360800+05:30[Asia/Calcutta]",
      "errorMessage": "java.util.concurrent.TimeoutException: Did not observe any item or terminal signal within 1000ms in 'circuitBreaker' (and no fallback has been configured)",
      "durationInMs": 1000,
      "stateTransition": null
    },
    {
      "circuitBreakerName": "accountsCircuitBreaker",
      "type": "SUCCESS",
      "creationTime": "2025-08-04T15:53:21.187804300+05:30[Asia/Calcutta]",
      "errorMessage": null,
      "durationInMs": 12,
      "stateTransition": null
    },
    {
      "circuitBreakerName": "accountsCircuitBreaker",
      "type": "SUCCESS",
      "creationTime": "2025-08-04T15:53:26.230583200+05:30[Asia/Calcutta]",
      "errorMessage": null,
      "durationInMs": 7,
      "stateTransition": null
    },
    {
      "circuitBreakerName": "accountsCircuitBreaker",
      "type": "SUCCESS",
      "creationTime": "2025-08-04T15:53:27.417447400+05:30[Asia/Calcutta]",
      "errorMessage": null,
      "durationInMs": 7,
      "stateTransition": null
    }
  ]
}

    {
      "circuitBreakerName": "accountsCircuitBreaker",
      "type": "STATE_TRANSITION",
      "creationTime": "2025-08-04T15:57:21.824886300+05:30[Asia/Calcutta]",
      "errorMessage": null,
      "durationInMs": null,
      "stateTransition": "OPEN_TO_HALF_OPEN"
    },
	
	
/////Feign client resilience

1.To make individual ms resilience add below dependcy
<dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-circuitbreaker-resilience4j</artifactId>
 </dependency>
 
 2. add below properties to ms 
 spring:
	cloud:
    openfeign:
      circuitbreaker:
        enabled: true

resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowSize: 10
      permittedNumberOfCallsInHalfOpenState: 2
      failureRateThreshold: 50
      waitDurationInOpenState: 10000
	  
3. fallback classes by implementing the feign client interfaces for each method

http://localhost:8080/actuator/circuitbreakers

{
  "circuitBreakers": {
    "CardsFeignClientfetchCardDetailsStringString": {
      "failureRate": "-1.0%",
      "slowCallRate": "-1.0%",
      "failureRateThreshold": "50.0%",
      "slowCallRateThreshold": "100.0%",
      "bufferedCalls": 2,
      "failedCalls": 0,
      "slowCalls": 0,
      "slowFailedCalls": 0,
      "notPermittedCalls": 0,
      "state": "CLOSED"
    },
    "LoansFeignClientfetchLoanDetailsStringString": {
      "failureRate": "-1.0%",
      "slowCallRate": "-1.0%",
      "failureRateThreshold": "50.0%",
      "slowCallRateThreshold": "100.0%",
      "bufferedCalls": 2,
      "failedCalls": 0,
      "slowCalls": 0,
      "slowFailedCalls": 0,
      "notPermittedCalls": 0,
      "state": "CLOSED"
    }
  }
}


http://localhost:8080/actuator/circuitbreakerevents
{
  "circuitBreakerEvents": [
    {
      "circuitBreakerName": "LoansFeignClientfetchLoanDetailsStringString",
      "type": "SUCCESS",
      "creationTime": "2025-08-04T16:45:06.639857200+05:30[Asia/Calcutta]",
      "errorMessage": null,
      "durationInMs": 201,
      "stateTransition": null
    },
    {
      "circuitBreakerName": "CardsFeignClientfetchCardDetailsStringString",
      "type": "SUCCESS",
      "creationTime": "2025-08-04T16:45:06.684070200+05:30[Asia/Calcutta]",
      "errorMessage": null,
      "durationInMs": 39,
      "stateTransition": null
    },
    {
      "circuitBreakerName": "LoansFeignClientfetchLoanDetailsStringString",
      "type": "SUCCESS",
      "creationTime": "2025-08-04T16:45:48.581264900+05:30[Asia/Calcutta]",
      "errorMessage": null,
      "durationInMs": 9,
      "stateTransition": null
    },
    {
      "circuitBreakerName": "CardsFeignClientfetchCardDetailsStringString",
      "type": "SUCCESS",
      "creationTime": "2025-08-04T16:45:48.590141100+05:30[Asia/Calcutta]",
      "errorMessage": null,
      "durationInMs": 9,
      "stateTransition": null
    }
  ]
}




4. maximum wait time for any http requesst to assign coonection from ms like account and send response except ms implementing circuitbreaker as it has its own time in global 

      httpclient:
        connect-timeout: 1000
        response-timeout: 2s
		
if response taskes more than 2 second , gatewayserver kills requesst and gives response as:

{
    "timestamp": "2025-08-04T11:33:37.781+00:00",
    "path": "/eazybank/loans/api/contact-info",
    "status": 504,
    "error": "Gateway Timeout",
    "requestId": "f690aced-2",
    "message": "Response took longer than timeout: PT2S",
    "trace": "org.springframework.cloud.gateway.support.TimeoutException: Response took longer than timeout: PT2S\r\n"}
	
	
5. Retry filter to retry a request if reuest is taking long to send reponse / or not sending reponse.

.retry(retryConfig -> retryConfig.setRetries(3)
										.setMethods(HttpMethod.GET)
										.setBackoff(Duration.ofMillis(100),Duration.ofMillis(1000),2,true)))
										
reponse will be tried 3 times + 1 intial request= 4 request
after 1st initial requesst by client-> 2nd will be after 100ms -> as factor is 2 so 3rd will be at least after 200 ms -> 4th will be atleast 400ms after 3 rd requesst(200*2)

/// below actual java method of back off

public RetryGatewayFilterFactory.RetryConfig setBackoff(
    java.time.Duration firstBackoff,
    java.time.Duration maxBackoff,
    int factor,
    boolean basedOnPreviousValue
)  we will above method to setBackoff